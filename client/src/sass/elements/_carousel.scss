/* HTML ===========================================================================

    <div class="carousel">
        <button class="carousel-btn left" onClick={prevSlide}>
            <i class="fas fa-chevron-left"></i>
        </button>

        <div class="carousel-container" onLoad={setUpCarousel}>
            <div class="carousel-slide" onTransitionEnd={loopCarousel}>
                <img class="carousel-image" id="last-clone" src={slide3} alt="" />
                <img class="carousel-image" src={slide1} alt="" />
                <img class="carousel-image" src={slide2} alt="" />
                <img class="carousel-image" src={slide3} alt="" />
                <img class="carousel-image" id="first-clone" src={slide1} alt="" />
            </div>

            <div class="carousel-nav" onClick={navigateToDot}>
                <button id="dot1" class="carousel-indicator current"></button>
                <button id="dot2" class="carousel-indicator"></button>
                <button id="dot3" class="carousel-indicator"></button>
            </div>
        </div>

        <button class="carousel-btn right" onClick={nextSlide}>
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>

================================================================================ */

/* JavaScript =====================================================================

    let counter = 1;
    let carouselSlide,
        carouselImages,
        carouselSize,
        dots,
        nav;

    // Set all variables
    const setUpCarousel = () => {
        carouselSlide = document.querySelector('.carousel-slide');
        carouselImages = document.querySelectorAll('.carousel-image');
        carouselSize = carouselImages[0].clientWidth;
        nav = document.querySelector('.carousel-nav');
        dots = Array.from(nav.children);

        carouselSlide.style.transform = `translateX(-${carouselSize * counter}px)`;
    }

    // Handle first and last slide
    const loopCarousel = () => {
        if (carouselImages[counter].id === 'last-clone') {
            resetFirstAndLast(carouselImages.length - 2);
        }
        if (carouselImages[counter].id === 'first-clone') {
            resetFirstAndLast(carouselImages.length - counter);
        }
    }

    const resetFirstAndLast = (newCount) => {
        carouselSlide.style.transition = 'none';
        counter = newCount;
        carouselSlide.style.transform = `translateX(-${carouselSize * counter}px)`;
    }


    // Navigation arrows
    const nextSlide = () => {
        if (counter >= carouselImages.length - 1) return;
        moveToSlide(counter + 1)
    }

    const prevSlide = () => {
        if (counter <= 0) return;
        moveToSlide(counter - 1)
    }

    // Move to target slide
    const moveToSlide = (target) => {
        counter = target;

        // Move Slide
        carouselSlide.style.transition = 'transform .8s ease-in-out';
        carouselSlide.style.transform = `translateX(-${carouselSize * counter}px)`;

        // Current and target dot
        const slideCount = carouselImages.length - 1;
        const currentDot = nav.querySelector('.current');
        let targetDot;

        // Check for first and last dot
        if (counter === slideCount) { targetDot = dots[0] }
        else if (counter === 0) { targetDot = dots[slideCount - 2] }
        else { targetDot = dots[counter - 1] }

        updateDots(currentDot, targetDot)

    }

    // Move dots
    const updateDots = (currentDot, targetDot) => {
        currentDot.classList.remove('current');
        targetDot.classList.add('current');
    }

    // Navigate to dot
    const navigateToDot = (e) => {
        if (e.target.tagName === 'BUTTON') {

            const currentDot = nav.querySelector('.current');
            const targetDot = e.target.closest('BUTTON');

            const targetIndex = dots.findIndex(dot => dot === targetDot);
            const targetCount = targetIndex + 1;

            moveToSlide(targetCount);

            updateDots(currentDot, targetDot);
        }
    }

================================================================================ */

.carousel {
    position: relative;
    // height: 40rem;
    width: 100%;
}

.carousel-container {
    margin-top: 2rem;
    overflow: hidden;
    position: relative;
}

.carousel-slide {
    display: flex;
    width: 100%;
    // height: 40rem;
    transition: transform 0.4s ease-in-out; 
}

.carousel-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    backface-visibility: hidden;
}

// Navigation arrows
.carousel-btn {
    position: absolute;
    top: 45%;
    font-size: 2.5rem;
    z-index: 2;
    color: #fff;
}

.carousel-btn.left {
    left: 5rem;
}

.carousel-btn.right {
    right: 5rem;
}


// Navigation dots
.carousel-nav {
    position: absolute;
    bottom: 3rem;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem 0;
}

.carousel-indicator {
    border-radius: 50%;
    width: 1rem;
    height: 1rem;
    background-color: rgba(255, 255, 255, 0.25);
    margin: 0 1rem;
}

.carousel-indicator.current {
    background-color: rgba(255, 255, 255, 1);
}

@media only screen and (max-width: $breakpoint-lg) { 
    .carousel-btn.left {
        left: 3rem;
    }
    
    .carousel-btn.right {
        right: 3rem;
    }

    .carousel-nav {
        bottom: 2rem;
    }
}

@media only screen and (max-width: $breakpoint-sm) { 
    .carousel-btn.left {
        left: 2rem;
    }
    
    .carousel-btn.right {
        right: 2rem;
    }

    .carousel-nav {
        bottom: 1rem;
    }
}